{"version":3,"sources":["serviceWorker.js","index.tsx","App.tsx"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","React","useState","data","setData","useEffect","a","fetch","search","substr","fetched","json","timestamp","value","parseFloat","map","filter","datas","reduce","pre","cur","key","Date","toLocaleDateString","year","month","day","load","console","log","newData","Object","entries","array","d","setHours","allKeys","keys","Box","position","left","top","right","bottom","tickFormat","ms","minutes","parseInt","toLocaleTimeString","hour","minute","replace","name","valueField","argumentField","CircularProgress","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"i2BAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCoCG,WAAO,IAAD,EACCC,IAAMC,SAAiE,IADxE,mBAChBC,EADgB,KACVC,EADU,KAGvBC,qBAAU,YACE,uCAAG,gCAAAC,EAAA,sEACWC,MAAMZ,OAAOC,SAASY,OAAOC,OAAO,IAD/C,cACLC,EADK,gBAEiDA,EAAQC,OAFzD,YAGJ,gBAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,MAAd,MAAgC,CACnCD,YACAC,MAAOC,WAAWD,KALX,KAOD,gBAAGA,EAAH,EAAGA,MAAH,OAAeA,EAAQ,IAAMA,EAAQ,IALzCV,EAFK,OAGRY,IAHQ,MAORC,OAPQ,MAULC,EAAQd,EAAKe,QAAO,SAACC,EAAKC,GAC9B,IAAMC,EAAiB,IAAIC,KAAKF,EAAIR,WA5C9BW,mBAAmB,QAAS,CACtCC,KAAM,UACNC,MAAO,OACPC,IAAK,YA0CD,OAAO,EAAP,GACKP,EADL,eAEGE,EAFH,CAEUD,GAFV,mBAEmBD,EAAIE,GAAOF,EAAIE,GAAO,SAExC,IAEHjB,EAAQa,GAlBG,4CAAH,qDAoBVU,KACC,CAACvB,IAEJwB,QAAQC,IAAI1B,GAEZ,IAAM2B,EAAUC,OAAOC,QAAQ7B,GAAMe,QAAO,SAACC,EAAD,GAAwB,IAAD,mBAAhBE,EAAgB,KAAXY,EAAW,KAC/D,MAAM,GAAN,mBACKd,GADL,YAEKc,EAAMlB,KAAI,YAAyB,IAAD,EAtDjBmB,EAsDLtB,EAAsB,EAAtBA,UAAWC,EAAW,EAAXA,MACxB,OAAO,EAAP,iBACGQ,GAxDea,EAwDUtB,GAvD5B,IAAIU,KAAKY,GACJC,SAAS,EAAG,EAAG,EAAG,IAqDvB,0BAEEvB,GAFF,sBAGEC,GAHF,SAOL,IAEGuB,EAAUL,OAAOM,KAAKlC,GAE5B,OACE,kBAACmC,EAAA,EAAD,CAAKC,SAAS,WAAWC,KAAM,EAAGC,IAAK,EAAGC,MAAO,EAAGC,OAAQ,GACzDxC,EACC,kBAAC,IAAD,CAAOA,KAAM2B,GACX,kBAAC,IAAD,MAGA,kBAAC,IAAD,CAAcc,WAAY,kBAAM,SAACC,GAC/B,IAAMC,EAAUC,SAASF,EAAI,IAAM,IAAO,GACpCX,EAAI,IAAIZ,KAEd,OADAY,EAAEC,SAASW,EAAU,GAAIA,EAAU,IACPZ,EA7DjCc,mBAAmB,QAAS,CACzBC,KAAM,UACNC,OAAQ,YAEXC,QAAQ,MAAO,QA2DZ,kBAAC,IAAD,MAECf,EAAQrB,KAAI,SAACM,GAAD,OAAS,kBAAC,IAAD,CAAYA,IAAKA,EAAK+B,KAAM/B,EAAKgC,WAAW,QAAQC,cAAejC,OAEzF,kBAAC,IAAD,OAEA,kBAACkC,EAAA,EAAD,SDnGM,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3277d9d8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useEffect } from 'react';\nimport { Box, CircularProgress, Paper } from '@material-ui/core'\nimport {\n  Chart,\n  ArgumentAxis,\n  ValueAxis,\n  LineSeries,\n  ZoomAndPan,\n  Legend,\n} from '@devexpress/dx-react-chart-material-ui';\nimport { string } from 'prop-types';\n\nconst formatDate = (date: Date) => {\n  return date.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n};\n\nfunction getMsSinceMidnight(d: number) {\n  var e = new Date(d);\n  return d - e.setHours(0, 0, 0, 0);\n}\n\nfunction timeConvert(n: number) {\n  var num = n;\n  var hours = (num / 60);\n  var rhours = Math.floor(hours);\n  var minutes = (hours - rhours) * 60;\n  var rminutes = Math.round(minutes);\n  return rhours + \":\" + rminutes;\n  }\n\nconst toCustomLocaleString = (date: Date) =>\n  date\n      .toLocaleTimeString('en-US', {\n          hour: 'numeric',\n          minute: '2-digit'\n      })\n      .replace(/:00/, '');\n\nexport const App = () => {\n  const [data, setData] = React.useState<Record<string, { timestamp: number, value: number }[]>>({});\n\n  useEffect(() => {\n    const load = async () => {\n      const fetched = await fetch(window.location.search.substr(1));\n      const data: { timestamp: number, value: number }[] = (await fetched.json() as unknown[])\n        .map(({ timestamp, value }: any) => ({\n          timestamp,\n          value: parseFloat(value)\n        }))\n        .filter(({ value }) => value > 10 && value < 35)\n\n\n      const datas = data.reduce((pre, cur) => {\n        const key = formatDate(new Date(cur.timestamp));\n        return {\n          ...pre,\n          [key]: [cur, ...(pre[key] ? pre[key] : [])]\n        }\n      }, {} as Record<string, { timestamp: number, value: number }[]>);\n\n      setData(datas);\n    };\n    load();\n  }, [setData])\n\n  console.log(data);\n\n  const newData = Object.entries(data).reduce((pre, [key, array]) => {\n      return [\n        ...pre,\n        ...array.map(({timestamp, value}) => {\n          return {\n            [key]: getMsSinceMidnight(timestamp),\n            timestamp,\n            value,\n          }\n        })\n      ]\n  }, [] as Record<string, string | number>[]);\n\n  const allKeys = Object.keys(data);\n\n  return (\n    <Box position=\"absolute\" left={0} top={0} right={0} bottom={0}>\n      {data ?\n        <Chart data={newData}>\n          <Legend\n          />\n\n          <ArgumentAxis tickFormat={() => (ms: string) => {\n            const minutes = parseInt(ms, 10) / 1000 / 60;\n            const d = new Date();\n            d.setHours(minutes / 60, minutes % 60);\n            return toCustomLocaleString(d);\n          }} />\n          <ValueAxis />\n\n          {allKeys.map((key) => <LineSeries key={key} name={key} valueField=\"value\" argumentField={key} />)}\n\n          <ZoomAndPan />\n        </Chart>\n        : <CircularProgress />}\n    </Box>\n  );\n}\n"],"sourceRoot":""}